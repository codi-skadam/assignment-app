{
    "pipes": [],
    "interfaces": [
        {
            "name": "IQuotes",
            "id": "interface-IQuotes-0b2a5d1223cec0628d40792e9a3a34b7",
            "file": "src/app/models/quotes.ts",
            "type": "interface",
            "sourceCode": "export interface IQuotes{\r\n    id?:number,\r\n    quote:string,\r\n    author:string\r\n}",
            "properties": [
                {
                    "name": "author",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "quote",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IUser",
            "id": "interface-IUser-c86864eb534acded35a6986a67042b94",
            "file": "src/app/models/user.ts",
            "type": "interface",
            "sourceCode": "export interface IUser{\r\n    id?:number,\r\n    username:string,\r\n    password:string\r\n}",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-5ec81df5f3caed65c8782169aaec7b4d",
            "file": "src/app/auth/auth.service.ts",
            "properties": [
                {
                    "name": "isUserLoggednIn",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "isUserAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "payload",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "payload",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { SERVER_URL } from 'src/environments/environment';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  public isUserLoggednIn:boolean = false;\n  constructor(private http: HttpClient,private router:Router) {\n    this.isUserLoggednIn = localStorage.getItem('currentUser') ? true : false;\n   }\n\n  login(payload){\n    if(payload){\n      this.http.get(SERVER_URL+'/users?username='+payload.username).subscribe(resp=>{\n        if(resp && resp[0].password === payload.password){\n          localStorage.setItem('currentUser', JSON.stringify(payload));\n          this.router.navigate(['/quotes-list']);\n          this.isUserLoggednIn = true;\n        }else {\n          this.isUserLoggednIn = false;\n        }\n      },(error)=>{\n        console.log(error);\n      });     \n    }\n  }\n\n  register(payload){\n    return this.http.post(SERVER_URL+'/users',payload);\n  }\n\n  logout(){\n    localStorage.removeItem('currentUser');\n    this.isUserLoggednIn = false;\n  }\n\n  isUserAuthenticated() {\n   return this.isUserLoggednIn;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "QuotesServiceService",
            "id": "injectable-QuotesServiceService-15cdf0b1bdcb95892874bbca895d0373",
            "file": "src/app/services/quotes-service.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addQuote",
                    "args": [
                        {
                            "name": "payload",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteQuote",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getQuotes",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12
                },
                {
                    "name": "updateQuote",
                    "args": [
                        {
                            "name": "newData",
                            "type": ""
                        },
                        {
                            "name": "oldData",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "newData",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "oldData",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport {SERVER_URL} from '../../environments/environment'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuotesServiceService {\n\n  constructor(private http: HttpClient) { }\n\n  getQuotes(){\n    return this.http.get(SERVER_URL+'/quotes?_sort=id&_order=desc');\n   }\n\n   addQuote(payload){\n     return this.http.post(SERVER_URL+'/quotes',payload);\n   }\n\n   deleteQuote(id){\n     return this.http.delete(SERVER_URL+'/quotes/'+id);\n   }\n\n   updateQuote(newData,oldData){\n     return this.http.patch(SERVER_URL+'/quotes/'+oldData.id,newData);\n   }\n  }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SnackbarService",
            "id": "injectable-SnackbarService-68e0e0e2f24db78b3e5203a6477131a5",
            "file": "src/app/services/snackbar.service.ts",
            "properties": [
                {
                    "name": "isSnackbarActive",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "text",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "type",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "setSnackBar",
                    "args": [
                        {
                            "name": "message",
                            "type": ""
                        },
                        {
                            "name": "type",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SnackbarService {\n\n  text:string='';\n  type:string='';\n  isSnackbarActive:boolean=false;\n  constructor() { }\n  setSnackBar(message,type){\n    this.text = message;\n    this.type = type;\n    this.isSnackbarActive = true;\n    setTimeout(() => {\n      this.text = '';\n      this.type = '';\n      this.isSnackbarActive = false;\n    }, 5000);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ToggleSwitch",
            "id": "class-ToggleSwitch-984bae370c09f242bc88fe0ab714cbe1",
            "file": "src/app/custom-components/toggle-switch.ts",
            "type": "class",
            "sourceCode": "import { LitElement,html,css } from 'lit-element';\r\n\r\n// Extend the LitElement base class\r\n// export the class, so it can be imported where it is needed\r\nexport class ToggleSwitch extends LitElement {\r\n  stateName: string;\r\n  state: boolean;\r\n    static get properties() {\r\n        return {\r\n          stateName: { type: String },\r\n          state: {type:Boolean}\r\n        };\r\n      }\r\n      static get styles() {\r\n        return css`\r\n        :host{\r\n            display:flex;\r\n            align-items:center;\r\n        }\r\n        .state-name{\r\n            margin-right:8px;\r\n            display: inline-block;\r\n            position: relative;\r\n        }\r\n        .toggle-switch {\r\n            height: 26px;\r\n            width: 52px;\r\n            border-radius: 15px;\r\n            display: inline-block;\r\n            position: relative;\r\n       }\r\n        .toggle-switch input {\r\n            display: none;\r\n       }\r\n        .toggle-switch input:checked + .slider {\r\n            background-color: chartreuse;\r\n       }\r\n        .toggle-switch input:checked + .slider::after {\r\n            -webkit-transform: translateX(26px);\r\n            -ms-transform: translateX(26px);\r\n            transform: translateX(26px);\r\n       }\r\n        .toggle-switch .slider {\r\n            position: absolute;\r\n            left: 0;\r\n            top: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            background-color: grey;\r\n            border-radius: 15px;\r\n            transition: 0.5s;\r\n       }\r\n        .toggle-switch .slider::after {\r\n            position: absolute;\r\n            content: '';\r\n            height: 18px;\r\n            width: 18px;\r\n            border-radius: 15px;\r\n            background-color: white;\r\n            left: 4px;\r\n            bottom: 4px;\r\n            transition: 0.5s;\r\n       }       \r\n        `;\r\n      }\r\n      constructor() {\r\n        super();\r\n        this.state = false;\r\n        this.stateName = '';\r\n      }\r\n      render() {\r\n        return html`\r\n        <label class=\"state-name\">${this.stateName}</label>\r\n        <label class=\"toggle-switch\">\r\n            <input type=\"checkbox\" value=\"${this.stateName}\" @click=${this.clickHandler}>\r\n            <div class=\"slider\"></div>\r\n        </label>\r\n        `;\r\n      }\r\n      clickHandler(event) {\r\n        this.state = !this.state;        \r\n        let myEvent = new CustomEvent('my-event', { \r\n            detail: { message: 'my-event happened.' },\r\n            bubbles: true, \r\n            composed: true });\r\n          this.dispatchEvent(myEvent);\r\n      }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 65
            },
            "properties": [
                {
                    "name": "state",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "stateName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "clickHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 71
                }
            ],
            "indexSignatures": [],
            "extends": "LitElement",
            "accessors": {
                "properties": {
                    "name": "properties",
                    "getSignature": {
                        "name": "properties",
                        "type": "",
                        "returnType": "",
                        "line": 8
                    }
                },
                "styles": {
                    "name": "styles",
                    "getSignature": {
                        "name": "styles",
                        "type": "",
                        "returnType": "",
                        "line": 14
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddQuoteComponent",
            "id": "component-AddQuoteComponent-6e546e20637a828d83762fa46845be7b",
            "file": "src/app/add-quote/add-quote.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-quote",
            "styleUrls": [
                "./add-quote.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-quote.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isEdit",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "quoteData",
                    "type": "IQuotes",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "quoteForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "generateForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "saveQuote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "updateQuote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder } from '@angular/forms';\nimport {QuotesServiceService} from '../services/quotes-service.service'\nimport {SnackbarService} from '../services/snackbar.service'\nimport {Router,ActivatedRoute, ActivatedRouteSnapshot} from \"@angular/router\"\nimport {IQuotes} from '../models/quotes'\n\n@Component({\n  selector: 'app-add-quote',\n  templateUrl: './add-quote.component.html',\n  styleUrls: ['./add-quote.component.scss']\n})\nexport class AddQuoteComponent implements OnInit {\n\n  quoteForm:FormGroup;\n  isEdit:boolean=false;\n  quoteData:IQuotes;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private quotesService:QuotesServiceService,\n    private router: Router,\n    public activatedRoute: ActivatedRoute,\n    private snackbarService:SnackbarService\n    ) {\n    this.generateForm();\n  }\n\n  ngOnInit(): void {\n    if (this.router.url === '/edit-quote'){\n      this.isEdit = true;\n      this.quoteData = history.state;\n      this.quoteForm.patchValue(this.quoteData);\n    }\n  }\n\n  generateForm(){\n    this.quoteForm = this.formBuilder.group({\n      quote: [''],\n      authorName: [''],\n    });\n  }\n\n  saveQuote() {\n    this.quotesService.addQuote({...this.quoteForm.value}).subscribe(resp=>{\n      if(resp){\n        this.snackbarService.setSnackBar('Quote is Added Successfully','success');\n        this.router.navigate(['/']);\n      }\n    },(error)=>{\n      console.log(error);\n    })\n  }\n\n  updateQuote () {\n    this.quotesService.updateQuote(this.quoteForm.value,this.quoteData).subscribe(resp=>{\n      if(resp){\n        this.snackbarService.setSnackBar('Quote is Updated Successfully','success');\n        this.router.navigate(['quotes-list']);\n      }\n    },(error)=>{\n      console.log(error);\n    })\n  }\n\n  ngOnDestroy(): void {\n  this.isEdit = false;\n  this.quoteForm.reset();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\r\n  display: block;\r\n  width: 50%;\r\n  margin-top:5%;\r\n  .container-box{\r\n    padding: 5%;\r\n    display: grid;\r\n  }\r\n}",
                    "styleUrl": "./add-quote.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "quotesService",
                        "type": "QuotesServiceService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "snackbarService",
                        "type": "SnackbarService"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "quotesService",
                        "type": "QuotesServiceService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbarService",
                        "type": "SnackbarService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "  <div class=\"container-box\">\n    <h2 class=\"text-center mb-10\">\n      <span *ngIf=\"isEdit\">Edit</span>\n      <span *ngIf=\"!isEdit\">Add</span>\n      Quote Form\n     </h2>\n     <form [formGroup]=\"quoteForm\" (ngSubmit)=\"isEdit?updateQuote():saveQuote()\">\n       <label>Quote: </label>\n       <textarea type=\"text\" formControlName=\"quote\"></textarea>\n       <label> Author Name:</label>\n       <input type=\"text\" formControlName=\"authorName\">\n       <button type=\"submit\" [disabled]=\"!quoteForm.valid\">\n         <span *ngIf=\"isEdit\">Edit</span>\n         <span *ngIf=\"!isEdit\">Add</span>\n         Quote\n       </button>\n     </form>\n  </div>\n\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-d5cc3ac3c3dbf588fb54cef35420c8af",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "snackbarService",
                    "type": "SnackbarService",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "theme$",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { SnackbarService } from './services/snackbar.service';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  theme$: Observable<string>\n  constructor(private stateStore: Store<{ theme: string }>,public snackbarService:SnackbarService){\n    this.theme$ = stateStore.select('theme');\n  }\n  ngOnInit(){\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".main{\r\n  width: 80%;\r\n  }\r\n\r\n  .right{\r\n  width: 20%;\r\n  }\r\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "stateStore",
                        "type": "Store<literal type>"
                    },
                    {
                        "name": "snackbarService",
                        "type": "SnackbarService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "stateStore",
                        "type": "Store<literal type>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbarService",
                        "type": "SnackbarService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div [ngClass]=\"{'light-theme':(theme$|async)==='Light','dark-theme':(theme$|async)==='Dark'}\">\n  <app-header></app-header>\n  <div class=\"content\" role=\"main\" >\n    <router-outlet></router-outlet>\n    <ng-container  *ngIf=\"this.snackbarService.isSnackbarActive\">\n      <app-snack-bar text=\"{{this.snackbarService.text}}\" type=\"{{this.snackbarService.type}}\"></app-snack-bar>\n    </ng-container>\n  </div>\n</div>\n\n\n"
        },
        {
            "name": "CustomButtonComponent",
            "id": "component-CustomButtonComponent-8abad5b5528a3f0fcb427ed9475bf50b",
            "file": "src/app/common-components/custom-button/custom-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-custom-button",
            "styleUrls": [
                "./custom-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./custom-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "text",
                    "defaultValue": "''",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "type",
                    "defaultValue": "''",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-custom-button',\n  templateUrl: './custom-button.component.html',\n  styleUrls: ['./custom-button.component.scss']\n})\nexport class CustomButtonComponent implements OnInit {\n\n  @Input() text:string='';\n  @Input() type:string='';\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\r\n    display: inline-block;\r\n    button{\r\n        padding: 8px 16px;\r\n        border: none;\r\n        outline: none;\r\n        font-size: 1rem;\r\n        font-weight: bold;\r\n        cursor: pointer;\r\n    }\r\n    .default-btn{\r\n        background: lightgray;\r\n    }\r\n    .link-button{\r\n        background: transparent;\r\n    }\r\n    .primary-btn{\r\n        background-color: chartreuse;\r\n    }\r\n    .danger-btn{\r\n        background: red;\r\n    }\r\n}",
                    "styleUrl": "./custom-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button \n[ngClass]=\"{'default-btn':type==='default',\n'link-button':type==='link',\n'primary-btn':type==='primary',\n'danger-btn':type==='danger'}\"\n>{{text}}</button>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-1236e1ca02f527a8e13c1a5e94d7f081",
            "file": "src/app/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "theme$",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "changeTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AuthService } from '../auth/auth.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { changetheme } from '../state/theme.actions';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\n\nexport class HeaderComponent implements OnInit {\n\n  theme$: Observable<string>\n\n  constructor(public authService:AuthService,private store: Store<{ theme: string }>,private router:Router) {\n    this.theme$ = store.pipe(select('theme'));\n   }\n\n  ngOnInit(): void {\n    \n  }\n\n logout(){\n   this.authService.logout();\n   this.router.navigate(['/quotes-list']);\n }\n\n changeTheme(){\n  this.store.dispatch(changetheme());\n }\n  \n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\r\n  .top-nav{\r\n    align-items: center;\r\n    display: flex;\r\n  }\r\n  .theme-label{\r\n    padding: 0 8px;\r\n  }\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "store",
                        "type": "Store<literal type>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<literal type>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header\" role=\"header\">\n  <h1 routerLink=\"/\">Quotes Assignment App</h1>\n  <div class=\"top-nav\">\n    <toggle-switch stateName=\"{{theme$|async}}\" (my-event)=\"changeTheme()\"></toggle-switch>\n    <app-custom-button type=\"link\" text=\"+ Add Quote\" *ngIf=\"this.authService.isUserLoggednIn\" routerLink=\"/add-quote\"></app-custom-button>\n    <app-custom-button type=\"link\" text=\"Register\"  routerLink=\"/register\" *ngIf=\"!this.authService.isUserLoggednIn\"></app-custom-button>\n    <app-custom-button type=\"link\" text=\"Login\" routerLink=\"/login\" *ngIf=\"!this.authService.isUserLoggednIn\"></app-custom-button>\n    <app-custom-button type=\"link\" text=\"Logout\" (click)=\"logout()\" *ngIf=\"this.authService.isUserLoggednIn\"></app-custom-button>\n  </div>\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-266f1907ba723cb3db55c0b2c45585fe",
            "file": "src/app/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "generateForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AuthService } from '../auth/auth.service';\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  loginForm:FormGroup;\n \n  constructor(private formBuilder: FormBuilder,private AuthService:AuthService,private router:Router) { }\n\n  ngOnInit(): void {\n    this.generateForm();\n  }\n\n  generateForm(){\n    this.loginForm = this.formBuilder.group({\n      username: [''],\n      password: [''],\n    });\n  }\n\n  login() {\n    this.AuthService.login(this.loginForm.value);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\r\n  display: block;\r\n  width: 40%;\r\n  margin-top:5%;\r\n  .container-box{\r\n    padding: 5%;\r\n    display: grid;\r\n  }\r\n}\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "AuthService",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "AuthService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container-box\">\n<h2 class=\"text-center mb-10\">Login Form</h2>\n<form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\n  <label>Username: </label>\n  <input type=\"text\" formControlName=\"username\">\n  <label> Password:</label>\n  <input type=\"password\" formControlName=\"password\">\n  <button type=\"submit\" [disabled]=\"!loginForm.valid\">Login</button>\n</form>\n</div>\n"
        },
        {
            "name": "QuoteDisplayComponentComponent",
            "id": "component-QuoteDisplayComponentComponent-50e90818fb66807eab7cca79f9b953ad",
            "file": "src/app/quote-display-component/quote-display-component.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-quote-display-component",
            "styleUrls": [
                "./quote-display-component.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./quote-display-component.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "quotesList",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "snackbarService",
                    "type": "SnackbarService",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteQuote",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getQuotes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "trackByFn",
                    "args": [
                        {
                            "name": "index",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {QuotesServiceService} from '../services/quotes-service.service'\nimport { AuthService } from '../auth/auth.service';\nimport { SnackbarService } from '../services/snackbar.service';\n\n@Component({\n  selector: 'app-quote-display-component',\n  templateUrl: './quote-display-component.component.html',\n  styleUrls: ['./quote-display-component.component.scss']\n})\nexport class QuoteDisplayComponentComponent implements OnInit {\n  quotesList:any;\n\n  constructor(private quotesService:QuotesServiceService,public authService:AuthService,public snackbarService:SnackbarService) {\n   }\n\n  ngOnInit(): void {\n   this.getQuotes();\n  }\n\n  getQuotes(){\n    this.quotesService.getQuotes().subscribe(resp=>{\n      if(resp){\n        this.quotesList = resp;\n      }\n    })\n  }\n\n  trackByFn(index) {\n    return index;\n  }\n\n  deleteQuote (id) {\n    this.quotesService.deleteQuote(id).subscribe(resp=>{\n      if(resp){\n        this.snackbarService.setSnackBar('Quote is deleted successfully','danger');\n        this.getQuotes();\n      }\n    },(error)=>{\n      console.log(error);\n    })\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\r\n  width: 100%;\r\n  .main-quote{\r\n    font-size: 1.5rem;\r\n    width: 100%;\r\n  }\r\n  .author-name{\r\n    font-size: 1rem;\r\n    padding:8px;\r\n  }\r\n\r\n  .quote-section{\r\n    min-width: 90%;\r\n  }\r\n  .quote-action-section{\r\n    min-width: 10%;\r\n  }\r\n}\r\n",
                    "styleUrl": "./quote-display-component.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "quotesService",
                        "type": "QuotesServiceService"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "snackbarService",
                        "type": "SnackbarService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "quotesService",
                        "type": "QuotesServiceService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbarService",
                        "type": "SnackbarService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card-container\">\n  <div class=\"card\" *ngFor=\"let quote of quotesList;trackBy:trackByFn\">\n    <div class=\"quote-section\">\n      <div class=\"main-quote\">\"{{quote.quote}}\"</div>\n      <div class=\"author-name\">-{{quote.authorName}}</div>\n    </div>\n    <div class=\"quote-action-section\">\n      <button class=\"small-btn primary-btn\" [routerLink]=\"['/edit-quote']\" [state] =\"quote\" *ngIf=\"this.authService.isUserLoggednIn\">Edit</button>\n      <button class=\"small-btn danger-btn \" (click)=\"deleteQuote(quote?.id)\" *ngIf=\"this.authService.isUserLoggednIn\">Delete</button>\n    </div>\n   </div>\n</div>\n"
        },
        {
            "name": "RegistrationComponent",
            "id": "component-RegistrationComponent-230f840094c208beba712ed80097d0f1",
            "file": "src/app/registration/registration.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-registration",
            "styleUrls": [
                "./registration.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./registration.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "generateForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth/auth.service';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport {IUser} from '../models/user';\nimport { SnackbarService } from '../services/snackbar.service';\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.scss']\n})\nexport class RegistrationComponent implements OnInit {\n  loginForm:FormGroup;\n  constructor(private formBuilder: FormBuilder,private AuthService:AuthService,private router:Router,private snackbarService:SnackbarService) { }\n\n  ngOnInit(): void {\n    this.generateForm();\n  }\n\n  generateForm(){\n    this.loginForm = this.formBuilder.group({\n      username: [''],\n      password: [''],\n    });\n  }\n  register() {\n    this.AuthService.register(this.loginForm.value).subscribe(resp=>{\n      this.router.navigate(['/login']);\n      this.snackbarService.setSnackBar('User Added Successfully','success');\n    },(error)=>{\n      console.log(error);\n      this.snackbarService.setSnackBar('User add failed','danger');\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\r\n    display: block;\r\n    width: 40%;\r\n    margin-top:5%;\r\n    .container-box{\r\n      padding: 5%;\r\n      display: grid;\r\n    }\r\n  }\r\n  ",
                    "styleUrl": "./registration.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "AuthService",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "snackbarService",
                        "type": "SnackbarService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "AuthService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbarService",
                        "type": "SnackbarService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container-box\">\n    <h2 class=\"text-center mb-10\">Registration Form</h2>\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"register()\">\n      <label>Username: </label>\n      <input type=\"text\" formControlName=\"username\">\n      <label> Password:</label>\n      <input type=\"password\" formControlName=\"password\">\n      <button type=\"submit\" [disabled]=\"!loginForm.valid\">Register</button>\n    </form>\n    </div>\n    "
        },
        {
            "name": "SnackBarComponent",
            "id": "component-SnackBarComponent-635f2cda1d1324635610f0629f00635f",
            "file": "src/app/snack-bar/snack-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-snack-bar",
            "styleUrls": [
                "./snack-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snack-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "text",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "type",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-snack-bar',\n  templateUrl: './snack-bar.component.html',\n  styleUrls: ['./snack-bar.component.scss']\n})\nexport class SnackBarComponent implements OnInit {\n\n  @Input() text:string;\n  @Input() type:string;\n\n  constructor() { }\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host{\r\n    display: block;\r\n   .snack-bar-container{\r\n    width: 100%;\r\n    height: 30px;\r\n    max-height: 60px;\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    background: lightgray;\r\n    text-align: center;\r\n    color: black;\r\n    font-size: 1.2rem;\r\n   }\r\n\r\n    .danger{\r\n        background: red;\r\n        color: white;\r\n    }\r\n    .success{\r\n        background: green;\r\n        color: white;\r\n\r\n    }\r\n}",
                    "styleUrl": "./snack-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"snack-bar-container\" [ngClass]=\"{'danger':type==='danger','success':type==='success'}\">\n    <div class=\"snack-bar-text\">{{text}}</div>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddQuoteComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CustomButtonComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "QuoteDisplayComponentComponent"
                        },
                        {
                            "name": "RegistrationComponent"
                        },
                        {
                            "name": "SnackBarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "_themeReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/theme.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  on(changetheme, (state) => {\r\n    if(state === 'Dark') {\r\n      \r\n      return 'Light'\r\n    } else{\r\n      return 'Dark'\r\n    }\r\n  } ),\r\n)"
            },
            {
                "name": "changetheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/theme.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Header Component] Change Theme')"
            },
            {
                "name": "Danger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/custom-button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Danger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Snackbar.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/custom-button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Snackbar.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/theme.reducer.ts",
                "type": "string",
                "defaultValue": "'Light'"
            },
            {
                "name": "Link",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/custom-button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/custom-button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SERVER_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "string",
                "defaultValue": "'http://localhost:3000'"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Snackbar.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/custom-button.stories.ts",
                "type": "Story<CustomButtonComponent>",
                "defaultValue": "(args: CustomButtonComponent) => ({\n  component: CustomButtonComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Snackbar.stories.ts",
                "type": "Story<SnackBarComponent>",
                "defaultValue": "(args: SnackBarComponent) => ({\n  component: SnackBarComponent,\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "themeReducer",
                "file": "src/app/state/theme.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/state/theme.reducer.ts": [
                {
                    "name": "_themeReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/theme.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  on(changetheme, (state) => {\r\n    if(state === 'Dark') {\r\n      \r\n      return 'Light'\r\n    } else{\r\n      return 'Dark'\r\n    }\r\n  } ),\r\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/theme.reducer.ts",
                    "type": "string",
                    "defaultValue": "'Light'"
                }
            ],
            "src/app/state/theme.actions.ts": [
                {
                    "name": "changetheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/theme.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Header Component] Change Theme')"
                }
            ],
            "src/stories/custom-button.stories.ts": [
                {
                    "name": "Danger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/custom-button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/custom-button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Link",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/custom-button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/custom-button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/custom-button.stories.ts",
                    "type": "Story<CustomButtonComponent>",
                    "defaultValue": "(args: CustomButtonComponent) => ({\n  component: CustomButtonComponent,\n  props: args,\n})"
                }
            ],
            "src/stories/Snackbar.stories.ts": [
                {
                    "name": "Danger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Snackbar.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Snackbar.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Snackbar.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Snackbar.stories.ts",
                    "type": "Story<SnackBarComponent>",
                    "defaultValue": "(args: SnackBarComponent) => ({\n  component: SnackBarComponent,\n  props: args,\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                },
                {
                    "name": "SERVER_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "string",
                    "defaultValue": "'http://localhost:3000'"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/state/theme.reducer.ts": [
                {
                    "name": "themeReducer",
                    "file": "src/app/state/theme.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "quotes-list",
                        "pathMatch": "full"
                    },
                    {
                        "path": "quotes-list",
                        "component": "QuoteDisplayComponentComponent"
                    },
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "register",
                        "component": "RegistrationComponent"
                    },
                    {
                        "path": "add-quote",
                        "component": "AddQuoteComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "edit-quote",
                        "component": "AddQuoteComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "**",
                        "redirectTo": ""
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/add-quote/add-quote.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddQuoteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/common-components/custom-button/custom-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/custom-components/toggle-switch.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ToggleSwitch",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/quotes.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IQuotes",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUser",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/quote-display-component/quote-display-component.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuoteDisplayComponentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/registration/registration.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegistrationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/quotes-service.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuotesServiceService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/snackbar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SnackbarService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/snack-bar/snack-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SnackBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/theme.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "changetheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/theme.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "themeReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/theme.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_themeReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/theme.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SERVER_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Snackbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Danger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Snackbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Snackbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Snackbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/custom-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Danger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/custom-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/custom-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Link",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/custom-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/custom-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}